//"bloons" style game, part 1
//coded by Dr. Mo, Feb 2022
//dynamicsofanasteroid.com
#include <SFML/Graphics.hpp>
#include <vector>
#include<iostream>
using namespace std;

//discussion questions for students:
//1) How would you *avoid* diagonals in the path? How do you purposely create them?
//2) Why the "-1" in this line: if(currPath < pathPoints.size()-1)? Why is it needed?
//3) What's the difference between a struct and a class? Could we have used a class instead of a struct?


//create a struct: structs are like classes, but no functions (just variables)
struct point {
    int x;
    int y;
};

class bloon {
private:
    float xpos;
    float ypos;
    int currPath;
public:
    bloon(int x, int y);
    void move(vector<point>mypath);
    void draw(sf::RenderWindow& window);
};


int main()
{
    //set up path points using the struct we made
    struct point p1;
    p1.x = 700;
    p1.y = 300;
    struct point p2;
    p2.x = 700;
    p2.y = 600;
    struct point p3;
    p3.x = 400;
    p3.y = 600;
    struct point p4;
    p4.x = 400;
    p4.y = 400;
    struct point p5;
    p5.x = 600;
    p5.y = 400;
    struct point p6;
    p6.x = 600;
    p6.y = 700;
    struct point p7;
    p7.x = 300;
    p7.y = 700;
    struct point p8;
    p8.x = 300;
    p8.y = 100;
    struct point p9;
    p9.x = 100;
    p9.y = 100;
    struct point p10;
    p10.x = 100;
    p10.y = 700;
    struct point p11;
    p11.x = 200;
    p11.y = 700;
    struct point p12;
    p12.x = 200;
    p12.y = 500;
    struct point p13;
    p13.x = 500;
    p13.y = 500;
    struct point p14;
    p14.x = 500;
    p14.y = 100;
    struct point p15;
    p15.x = 900;
    p15.y = 100;



    //set up vector to hold path points, push path points into it
    vector <point> pathPoints;
    pathPoints.push_back(p1);
    pathPoints.push_back(p2);
    pathPoints.push_back(p3);
    pathPoints.push_back(p4);
    pathPoints.push_back(p5);
    pathPoints.push_back(p6);
    pathPoints.push_back(p7);
    pathPoints.push_back(p8);
    pathPoints.push_back(p9);
    pathPoints.push_back(p10);
    pathPoints.push_back(p11);
    pathPoints.push_back(p12);
    pathPoints.push_back(p13);
    pathPoints.push_back(p14);
    pathPoints.push_back(p15);


    // create game window
    sf::RenderWindow window(sf::VideoMode(800, 800), "bloons");

    //balloon variables
    
    int xpos = -50; //start off screen
    int ypos = 300;
    bloon blob(xpos, ypos);
    bloon blop(xpos-125, ypos);
    bloon blot(xpos-250, ypos);
    bloon blow(xpos-375, ypos);
    bloon blos(xpos-500, ypos);
    bloon blol(xpos-625, ypos);
    int currPath = 0; //begin heading towards the first point in the pathing vector
    int ticker = 0;


    // GAME LOOP----------------------------------------------------------------------------------------
    while (window.isOpen())
    {
        // check all the window's events that were triggered since the last iteration of the loop
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        ticker++; //slow dem bloons down
        if (ticker % 15 == 0) { //make 30 bigger to slow down baloon more
            blob.move(pathPoints);
            blop.move(pathPoints);
            blot.move(pathPoints);
            blow.move(pathPoints);
            blos.move(pathPoints);
            blol.move(pathPoints);
        }//end pathing algorithm*****************

        // Render section----------------------------------------------------------------
        window.clear(sf::Color::Black);
        blob.draw(window);
        blop.draw(window);
        blot.draw(window);
        blow.draw(window);
        blos.draw(window);
        blol.draw(window);
        window.display();
    }

    return 0;//buh bye
}
bloon::bloon(int x, int y) {
    
    xpos = x; //start off screen
    ypos = y;
    currPath = 0; //begin heading towards the first point in the pathing vector

}

void bloon::move(vector<point>pathPoints) {

    if ((xpos == pathPoints[currPath].x) && (ypos == pathPoints[currPath].y))
        if (currPath < pathPoints.size() - 1) //don't walk off end of vector!
            currPath++; //iterate to next point

    //if not there yet, move our x towards x position of next junction
    if (xpos < pathPoints[currPath].x)
        xpos += 1;
    if (xpos > pathPoints[currPath].x)
        xpos -= 1;
    //and move our y towards y position of next junction
    if (ypos < pathPoints[currPath].y)
        ypos += 1;
    if (ypos > pathPoints[currPath].y)
        ypos -= 1;
}

void bloon::draw(sf::RenderWindow& window) {
    sf::CircleShape bloon(15);
    bloon.setFillColor(sf::Color(250, 0, 0));
    bloon.setPosition(xpos, ypos);
    window.draw(bloon);
}
